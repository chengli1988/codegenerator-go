package {{.PackageName}}

import (
	"strings"

    "baseproject-api/util"
	dbutil "github.com/chengli1988/go-dbutil-mysql"
)

const (
	{{- range $index, $column := .Columns}}
	{{$.GetSupperTableName}}_{{$column.GetSupperColumnName}} = "{{$column.ColumnName}}"
	{{- end}}
)

type {{.GetStructName}}Model struct {
	{{- range $index, $column := .Columns}}
	{{$column.GetStructFieldName}} {{$column.GetVarType}} `json:"{{$column.GetTagJsonName}}" db:"{{$column.ColumnName}}"` // {{$column.ColumnComment}}
	{{- end}}
}

// GetTableName 返回数据库表名
func ({{.GetStructVariableName}} {{.GetStructName}}Model) GetTableName() string {
	return "{{.TableName}}"
}

// Query{{.GetStructName}}ById 根据标识查询{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Query{{.GetStructName}}ById() (map[string]interface{}, error) {
	engine := dbutil.NewEngine({{.GetStructVariableName}}, nil)
	engine.WhereEqs({{.GetSupperTableName}}_{{.IdColumn.GetSupperColumnName}})

	return engine.SelectOne()
}

// QueryAll{{.GetStructName}} 查询{{.GetStructName}}全部数据
func ({{.GetStructVariableName}} {{.GetStructName}}Model) QueryAll{{.GetStructName}}() ([]map[string]interface{}, error) {
	return dbutil.NewEngine({{.GetStructVariableName}}, nil)./*OrderByAsc().*/SelectAll()
}

// QueryPage{{.GetStructName}} 根据条件查下{{.GetStructName}}列表数据(分页)
func ({{.GetStructVariableName}} {{.GetStructName}}Model) QueryPage{{.GetStructName}}(pageUtil util.PageUtil) ([]map[string]interface{}, int, error) {
	engine := dbutil.NewEngine({{.GetStructVariableName}}, nil)
	
	// 根据实际情况添加条件
	// engine.WhereLikes()
	// engine.OrderByDesc()
	engine.Limit(pageUtil.CurrentPage, pageUtil.PageSize)

	return engine.SelectPage()
}

// Add{{.GetStructName}} 新增{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Add{{.GetStructName}}(loginUserId string) error {
	var (
		// baseDB    dbutil.BaseDB
		err       error
	)

	{{.GetStructVariableName}}.{{.IdColumn.GetStructFieldName}} = util.CreateUUID()
	// {{.GetStructVariableName}}.CreateId = loginUserId
	// {{.GetStructVariableName}}.CreateTime = util.GetCurrentTime()

	err = dbutil.NewEngine({{.GetStructVariableName}}, nil).Insert()

	/* 事务例子(必须保证dbutil.NewEngine的第二个参数&baseDB为同一个实例)
	_, err = baseDB.DoTransaction(func() error {
		
		// 一些操作...
		{{.GetStructVariableName}}.{{.IdColumn.GetStructFieldName}} = util.CreateUUID()
		// {{.GetStructVariableName}}.CreateId = loginUserId
		// {{.GetStructVariableName}}.CreateTime = util.GetCurrentTime()

		// 数据库操作
		err = dbutil.NewEngine({{.GetStructVariableName}}, &baseDB).Insert()
		if err != nil {
			return err
		}
		
		// 数据库操作
		err = dbutil.NewEngine({{.GetStructVariableName}}, &baseDB).Insert()
		if err != nil {
			return err
		}

		return nil
	})
	*/

	return err
}

// Edit{{.GetStructName}} 修改{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Edit{{.GetStructName}}(loginUserId string) error {
	var (
		// baseDB dbutil.BaseDB
		err    error
	)

	// {{.GetStructVariableName}}.UpdateId = loginUserId
	// {{.GetStructVariableName}}.UpdateTime = util.GetCurrentTime()

	engine := dbutil.NewEngine({{.GetStructVariableName}}, nil)
	engine.WhereEqs({{.GetSupperTableName}}_{{.IdColumn.GetSupperColumnName}})

	// 如需事务操作，参考Add{{.GetStructName}}事务例子的注释代码
	_, err = engine.Update()

	return err
}

// Remove{{.GetStructName}}ByIds 根据标识删除{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Remove{{.GetStructName}}ByIds() error {
	var (
		// baseDB    dbutil.BaseDB
		err       error
	)

	{{.GetStructVariableName}}Ids := {{.GetStructVariableName}}.{{.GetStructName}}Id
	if {{.GetStructVariableName}}Ids == "" {
		return util.ErrorUtil{99003, "删除失败, 缺少必要参数！"}
	}

	engine := dbutil.NewEngine({{.GetStructVariableName}}, nil)

	idArray := strings.Split({{.GetStructVariableName}}Ids, ",")
	if len(idArray) == 1 {
		engine.WhereEqs({{.GetSupperTableName}}_{{.IdColumn.GetSupperColumnName}})
	} else {
		engine.WhereIns({{.GetSupperTableName}}_{{.IdColumn.GetSupperColumnName}})
	}

	// 如需事务操作，参考Add{{.GetStructName}}事务例子的注释代码
	_, err = engine.Delete()

	return err
}
