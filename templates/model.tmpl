package {{.PackageName}}

import (
	"strings"

    "base-api/util"

	"github.com/chengli1988/dbutil-mysql"
)

// {{.GetStructName}}字段常量
const (
	{{- range $index, $column := .Columns}}
	{{$.GetTableName}}{{$column.GetStructFieldName}} = "{{$column.GetTagJsonName}}"
	{{- end}}
)

// {{.GetStructName}}Model {{.GetStructVariableName}} struct
type {{.GetStructName}}Model struct {
	{{- range $index, $column := .Columns}}
	{{$column.GetStructFieldName}} {{$column.GetVarType}} `json:"{{$column.GetTagJsonName}}" db:"{{$column.ColumnName}}" dbType:"{{$column.DataType}}" dbField:"true"` // {{$column.ColumnComment}}
	{{- end}}

	// 自定义字段
}

// GetTableName 返回数据库表名
func ({{.GetStructVariableName}} {{.GetStructName}}Model) GetTableName() string {
	return "{{.TableName}}"
}

// Query{{.GetStructName}}ById 根据标识查询{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Query{{.GetStructName}}ById() (map[string]interface{}, error) {
	selectEngine := dbutil.NewSelectEngine({{.GetStructVariableName}})
	selectEngine.WhereEqs({{.GetTableName}}{{.IdColumn.GetStructFieldName}})

	return selectEngine.SelectOne()
}

// QueryAll{{.GetStructName}} 查询{{.GetStructName}}全部数据
func ({{.GetStructVariableName}} {{.GetStructName}}Model) QueryAll{{.GetStructName}}() ([]map[string]interface{}, error) {
	return dbutil.NewSelectEngine({{.GetStructVariableName}})./*OrderByAsc().*/SelectAll()
}

// QueryPage{{.GetStructName}} 根据条件查下{{.GetStructName}}列表数据(分页)
func ({{.GetStructVariableName}} {{.GetStructName}}Model) QueryPage{{.GetStructName}}(pageUtil util.PageUtil) ([]map[string]interface{}, int, error) {
	selectEngine := dbutil.NewSelectEngine({{.GetStructVariableName}})
	
	// 根据实际情况添加条件
	// selectEngine.WhereLikes()
	// selectEngine.OrderByDesc()
	selectEngine.Limit(pageUtil.CurrentPage, pageUtil.PageSize)

	return selectEngine.SelectPage()
}

// Add{{.GetStructName}} 新增{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Add{{.GetStructName}}(loginUserId string) error {
	var (
		// db    dbutil.DB
		err       error
	)

	{{.GetStructVariableName}}.{{.IdColumn.GetStructFieldName}} = util.CreateUUID()
	// {{.GetStructVariableName}}.CreateId = loginUserId
	// {{.GetStructVariableName}}.CreateTime = util.GetCurrentTime()

	err = dbutil.NewInsertEngine({{.GetStructVariableName}}).Insert()

	/* 事务例子(必须保证dbutil.NewInsertEngine的第二个参数&db为同一个实例)
	_, err = db.DoTransaction(func() error {
		
		// 一些操作...
		{{.GetStructVariableName}}.{{.IdColumn.GetStructFieldName}} = util.CreateUUID()
		// {{.GetStructVariableName}}.CreateId = loginUserId
		// {{.GetStructVariableName}}.CreateTime = util.GetCurrentTime()

		// 数据库操作
		err = dbutil.NewInsertEngineDB({{.GetStructVariableName}}, &db).Insert()
		if err != nil {
			return err
		}
		
		// 数据库操作
		err = dbutil.NewInsertEngineDB({{.GetStructVariableName}}, &db).Insert()
		if err != nil {
			return err
		}

		return nil
	})
	*/

	return err
}

// Edit{{.GetStructName}} 修改{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Edit{{.GetStructName}}(loginUserId string) error {
	var err error

	// {{.GetStructVariableName}}.UpdateId = loginUserId
	// {{.GetStructVariableName}}.UpdateTime = util.GetCurrentTime()

	updateEngine := dbutil.NewUpdateEngine({{.GetStructVariableName}})
	updateEngine.WhereEqs({{.GetTableName}}{{.IdColumn.GetStructFieldName}})

	// 如需事务操作，参考Add{{.GetStructName}}事务例子的注释代码
	_, err = updateEngine.Update()

	return err
}

// Remove{{.GetStructName}}ByIds 根据标识删除{{.GetStructName}}
func ({{.GetStructVariableName}} {{.GetStructName}}Model) Remove{{.GetStructName}}ByIds() error {
	var (
		// baseDB    dbutil.BaseDB
		err       error
	)

	{{.GetStructVariableName}}Ids := {{.GetStructVariableName}}.{{.GetStructName}}Id
	if {{.GetStructVariableName}}Ids == "" {
		return util.ErrorUtil{99003, "删除失败, 缺少必要参数！"}
	}

	deleteEngine := dbutil.NewDeleteEngine({{.GetStructVariableName}})

	idArray := strings.Split({{.GetStructVariableName}}Ids, ",")
	if len(idArray) == 1 {
		deleteEngine.WhereEqs({{.GetTableName}}{{.IdColumn.GetStructFieldName}})
	} else {
		deleteEngine.WhereIns({{.GetTableName}}{{.IdColumn.GetStructFieldName}})
	}

	// 如需事务操作，参考Add{{.GetStructName}}事务例子的注释代码
	_, err = deleteEngine.Delete()

	return err
}
